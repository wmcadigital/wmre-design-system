/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/www/wmre-website.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/wmre/patterns/cookies/_example.js":
/*!***********************************************!*\
  !*** ./src/wmre/patterns/cookies/_example.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var cookies = function cookies() {
  var cookiesBanner = document.querySelector('header .wmre-cookies-banner');

  if (cookiesBanner) {
    var hideCookieBanner = function hideCookieBanner() {
      cookiesBanner.style.display = 'none';
    };

    var showCookieBanner = function showCookieBanner() {
      var codeExample = document.querySelector('.wmre-website-code-example .wmre-cookies-banner');
      cookiesBanner.style.display = 'block';
      if (codeExample) codeExample.style.display = 'block'; // Ensure the cookie banner in the component example stays visible even if the user has already accepted cookies
    }; // Set cookie based on name, value and expiry date supplied


    var setCookie = function setCookie(cname, cvalue, exdays) {
      var d = new Date();
      d.setTime(d.getTime() + exdays * 24 * 60 * 60 * 1000);
      var expires = "expires=".concat(d.toUTCString());
      var domain = "domain=".concat(window.location.hostname);
      document.cookie = "".concat(cname, "=").concat(cvalue, ";").concat(expires, ";").concat(domain, ";path=/");
    }; // Get cookie based on name supplied


    var getCookie = function getCookie(cname) {
      var name = "".concat(cname, "=");
      var ca = document.cookie.split(';');

      for (var i = 0; i < ca.length; i += 1) {
        var c = ca[i];

        while (c.charAt(0) === ' ') {
          c = c.substring(1);
        }

        if (c.indexOf(name) === 0) {
          return c.substring(name.length, c.length);
        }
      }

      return '';
    }; // Check if cookie(s) created or not


    var checkCookie = function checkCookie(cname) {
      var isCookieCreated = getCookie(cname);

      if (isCookieCreated === '') {
        return false;
      }

      return true;
    };

    var getCookiePolicy = function getCookiePolicy() {
      return JSON.parse(getCookie('cookies-policy'));
    };

    var updateCookiePreferences = function updateCookiePreferences() {
      if (document.querySelector('.wmre-cookies-manager__preferences')) {
        hideCookieBanner();
        var cookiesOptions = document.querySelector('.wmre-cookies-manager__preferences').querySelectorAll('.wmre-fe-checkboxes__input');
        var currentOptions = [getCookiePolicy().essential, getCookiePolicy().functional, getCookiePolicy().performance];

        for (var i = 0; i < cookiesOptions.length; i += 1) {
          cookiesOptions[i].checked = currentOptions[i];
        }
      }
    };

    var setCookiePolicy = function setCookiePolicy(essentialValue, functionalValue, performanceValue) {
      var cookieValue = {
        essential: essentialValue,
        functional: functionalValue,
        performance: performanceValue
      };
      setCookie('cookies-policy', JSON.stringify(cookieValue), 181);
      updateCookiePreferences();
    };

    var acceptAllCookies = function acceptAllCookies() {
      setCookiePolicy(true, true, true);
      setCookie('cookies-preference', true, 181);
      hideCookieBanner();
    };

    var savePreferences = function savePreferences() {
      if (document.querySelector('.wmre-cookies-manager__form')) {
        var elements = document.querySelector('.wmre-cookies-manager__form').querySelectorAll('.wmre-fe-checkboxes__input');
        var selectedOptions = [];

        for (var i = 0; i < elements.length; i += 1) {
          selectedOptions[i] = elements.item(i).checked;
        }

        setCookiePolicy.apply(void 0, selectedOptions);
        setCookie('cookies-preference', true, 181);
      }
    };

    var cookiesScan = function cookiesScan() {
      // if cookies-preference doesn't exist, show cookie banner
      if (!checkCookie('cookies-preference')) {
        showCookieBanner();
        setCookiePolicy(true, false, false);
      } // verify if we are at Cookies Manager page and update the selected options to match the already created cookie


      updateCookiePreferences();
    };

    var isInIframe = window.frameElement && window.frameElement.nodeName === 'IFRAME'; // check if we are in an iframe
    // Creation of default Cookies permissions when the DOM is fully loaded

    if (!isInIframe) document.addEventListener('DOMContentLoaded', cookiesScan); // When Accept all cookies button is triggered

    var acceptAllCookiesBtn = document.querySelector('.wmre-cookies-banner__accept-all-cookies');

    if (!isInIframe) {
      acceptAllCookiesBtn.addEventListener('click', acceptAllCookies);
      acceptAllCookiesBtn.addEventListener('keydown', function (event) {
        if (event.key === ' ' || event.key === 'Enter' || event.key === 'Spacebar') {
          event.preventDefault();
          acceptAllCookies();
        }
      });
    } // When Safe Preferences button is triggered


    var cookieForm = document.querySelector('.wmre-cookies-manager__form');
    if (cookieForm) cookieForm.addEventListener('submit', savePreferences);
  }
};

/* harmony default export */ __webpack_exports__["default"] = (cookies);

/***/ }),

/***/ "./src/wmre/patterns/footer/_example.js":
/*!**********************************************!*\
  !*** ./src/wmre/patterns/footer/_example.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var footerJs = function footerJs() {
  var mobileFooter = window.matchMedia('(max-width: 767px)');
  var collapseMenus = document.querySelectorAll('.wmre-collapse-heading');

  var handleMobileFooter = function handleMobileFooter(mq) {
    if (mq.matches) {
      collapseMenus.forEach(function (collapseToggle) {
        var toggleActive = false;
        var panel = collapseToggle.nextElementSibling;

        var handleToggle = function handleToggle() {
          if (toggleActive) {
            collapseToggle.setAttribute('aria-expanded', 'true');
            panel.style.maxHeight = "".concat(panel.scrollHeight, "px");
          } else {
            collapseToggle.setAttribute('aria-expanded', 'false');
            panel.style.maxHeight = null;
          }
        };

        handleToggle();
        collapseToggle.addEventListener('click', function () {
          toggleActive = !toggleActive;
          handleToggle();
        });
      });
    }
  }; // init mobile nav function


  handleMobileFooter(mobileFooter);
  mobileFooter.addListener(handleMobileFooter);
};

/* harmony default export */ __webpack_exports__["default"] = (footerJs);

/***/ }),

/***/ "./src/wmre/patterns/header/_example.js":
/*!**********************************************!*\
  !*** ./src/wmre/patterns/header/_example.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var headerJs = function headerJs() {
  // get mega menu elements
  var megaMenus = document.querySelectorAll('.wmre-mega-menu');
  var mobileMenu = window.matchMedia('(max-width: 992px)');
  /* 
      Mega menu helper functions
  */
  // getMenuLink returns a specified menu link from a specified array
  // currentIndex = index of the link that is currently focused
  // array = array to move through
  // direction = next, prev,

  var getMenuLink = function getMenuLink(currentIndex, array, direction) {
    var menuLink = null;

    if (array) {
      if (direction === 'prev') {
        // return previous link in specified array if there is one else return null;
        menuLink = array[currentIndex - 1] ? array[currentIndex - 1] : null;
      } else if (direction === 'next') {
        // return next link in specified array if there is one else return null;
        menuLink = array[currentIndex + 1] ? array[currentIndex + 1] : null;
      } else {
        // return link with same index in specified array;
        menuLink = array[currentIndex] ? array[currentIndex] : array[array.length - 1];
      }
    }

    return menuLink;
  }; // takes a menu element and allows moving between focus via tabbing/arrows


  var setKeyboardNavigation = function setKeyboardNavigation(subMenuContainer, subMenuQuery, onFirst, onLast) {
    // array of all links in menu container
    var allLinksArray = []; // use specified query to select all submenus

    var subMenus = subMenuContainer.querySelectorAll(subMenuQuery);
    subMenus.forEach(function (subMenu, subMenuIndex) {
      var thisSubMenuLinks = subMenu.querySelectorAll('a'); // add list of all links in this container to an array

      allLinksArray.push(thisSubMenuLinks); // add event listener to each link with key logic

      thisSubMenuLinks.forEach(function (link, linkIndex) {
        link.addEventListener('keydown', function (e) {
          // if not escape
          if (e.keyCode !== 27) {
            e.stopPropagation();

            if (e.keyCode === 39) {
              // right arrow - go to link of same index in next menu list
              e.preventDefault();
              var nextMenuLink = getMenuLink(linkIndex, allLinksArray[subMenuIndex + 1]);
              if (nextMenuLink) nextMenuLink.focus();
            } else if (e.keyCode === 37) {
              // left arrow - go to link of same index in previous menu list
              e.preventDefault();
              var prevMenuLink = getMenuLink(linkIndex, allLinksArray[subMenuIndex - 1]);
              if (prevMenuLink) prevMenuLink.focus();
            } else if (e.keyCode === 40 || e.keyCode === 9 && !e.shiftKey) {
              // down arrow or tab - go to next link in current menu list
              e.preventDefault(); // if next link doesn't exist try next menu first item else return null

              var nextLink = getMenuLink(linkIndex, thisSubMenuLinks, 'next') ? getMenuLink(linkIndex, thisSubMenuLinks, 'next') : getMenuLink(-1, allLinksArray[subMenuIndex + 1], 'next');

              if (nextLink) {
                nextLink.focus();
              } else if (onLast) {
                onLast();
              }
            } else if (e.keyCode === 38 || e.shiftKey && e.keyCode === 9) {
              // up arrow or shift + tab - go to previous item in current menu list
              e.preventDefault();
              var prevMenu = allLinksArray[subMenuIndex - 1];
              var prevLink = null;

              if (prevMenu || linkIndex > 0) {
                prevLink = getMenuLink(linkIndex, thisSubMenuLinks, 'prev') ? getMenuLink(linkIndex, thisSubMenuLinks, 'prev') : getMenuLink(prevMenu.length, prevMenu, 'prev');
              }

              if (prevLink) {
                prevLink.focus();
              } else if (onFirst) {
                onFirst();
              }
            }
          }
        });
      });
    });
  };

  megaMenus.forEach(function (menu) {
    var clearActiveListItems = function clearActiveListItems() {
      // remove active classes from other list items
      menu.querySelectorAll('.wmre-mega-menu__primary-menu-item').forEach(function (menuItem) {
        menuItem.classList.remove('active');
      });
    }; // handle setting the active class on menu and list items


    var setMenuActive = function setMenuActive(element) {
      var active = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var onCloseFocusElement = arguments.length > 2 ? arguments[2] : undefined;

      if (active) {
        menu.classList.add('active');
        clearActiveListItems(); // add active class to current item

        element.classList.add('active');
      } else {
        menu.classList.remove('active');
        element.classList.remove('active'); // set focus on menu close

        if (onCloseFocusElement) onCloseFocusElement.focus();
      }
    }; // mobile nav function


    function handleMobileMenu(mq) {
      if (mq.matches) {
        var mobileToggle = menu.querySelector('.wmre-mega-menu__mobile-toggle');
        var headerEl = menu.parentNode.parentNode;
        var topLevelMenuBtn = menu.querySelectorAll('.wmre-mega-menu__link-arrow-icon-btn');
        var searchBtn = menu.querySelector('.wmre-mega-menu__search-btn'); // object to see which menu/menu level is open

        var mobileMenuIsOpen = {
          menu: false,
          primary: false,
          search: false
        }; // handle mobile menu toggle

        mobileToggle.addEventListener('click', function () {
          mobileMenuIsOpen.menu = !mobileMenuIsOpen.menu;

          if (mobileMenuIsOpen.menu) {
            mobileMenuIsOpen.search = false;
            headerEl.classList.remove('wmre-header--search-open');
            headerEl.classList.add('wmre-header--mega-menu-open');
            document.querySelector('html').classList.add('mobile-menu-open');
          } else {
            headerEl.classList.remove('wmre-header--mega-menu-open', 'wmre-header--mega-menu-submenu-open');
            document.querySelector('html').classList.remove('mobile-menu-open');
          }
        });

        if (searchBtn) {
          searchBtn.addEventListener('click', function () {
            mobileMenuIsOpen.search = !mobileMenuIsOpen.search;

            if (mobileMenuIsOpen.search) {
              mobileMenuIsOpen.menu = false;
              headerEl.classList.remove('wmre-header--mega-menu-open', 'wmre-header--mega-menu-submenu-open');
              document.querySelector('html').classList.remove('mobile-menu-open');
              headerEl.classList.add('wmre-header--search-open');
            } else {
              headerEl.classList.remove('wmre-header--search-open');
            }
          });
        } // handle sub menu open/close


        topLevelMenuBtn.forEach(function (menuBtn) {
          menuBtn.addEventListener('click', function () {
            mobileMenuIsOpen.primary = !mobileMenuIsOpen.primary;
            var targetListItem = menuBtn.parentNode;

            if (mobileMenuIsOpen.primary) {
              targetListItem.classList.add('open');
              targetListItem.querySelector('.wmre-mega-menu__sub-menu-link').focus();
              headerEl.classList.add('wmre-header--mega-menu-submenu-open');
            } else {
              targetListItem.classList.remove('open');
              headerEl.classList.remove('wmre-header--mega-menu-submenu-open');
            }
          });
        }); // mobile collapse for third level menus

        var collapseMenus = menu.querySelectorAll('.wmre-mega-menu__sub-menu-item .wmre-mega-menu__collapse-toggle');
        collapseMenus.forEach(function (collapseToggle) {
          collapseToggle.addEventListener('click', function () {
            var panel = collapseToggle.nextElementSibling;
            collapseToggle.classList.toggle('open');

            if (panel.style.maxHeight) {
              panel.style.maxHeight = null;
            } else {
              panel.style.maxHeight = "".concat(panel.scrollHeight, "px");
            }
          });
        });
      }
    } // end mobile nav function
    // init mobile nav function


    handleMobileMenu(mobileMenu);
    mobileMenu.addListener(handleMobileMenu);
    var topLevelLinks = menu.querySelectorAll('.wmre-mega-menu__primary-menu-link');
    var menuDelay = false;
    var enterTimeOut;
    var leaveTimeOut;
    var delayTime = 300; // handle events within each top level list item

    topLevelLinks.forEach(function (topLevelLink, topLevelLinkIndex) {
      // return list item parent of the current link if it exists else return the link
      var topLevelListItem = topLevelLink.parentNode.tagName === 'LI' || topLevelLink.parentNode.className.includes('wmre-mega-menu__search') ? topLevelLink.parentNode : topLevelLink;
      var subMenuLinks = topLevelListItem.querySelectorAll('.wmre-mega-menu__sub-menu-link'); // check if level 3 menus are present, if so add modifier class

      var hasSubmenuChildren = topLevelListItem.querySelectorAll('.wmre-mega-menu__sub-menu-child-menu').length !== 0;

      if (hasSubmenuChildren) {
        topLevelListItem.querySelectorAll('.wmre-mega-menu__sub-menu').forEach(function (subMenu) {
          subMenu.classList.add('wmre-mega-menu__sub-menu--has-child-menus');
        });
      }

      var openSubMenu = function openSubMenu(e) {
        // check if list item has a mega menu
        if (topLevelListItem.querySelectorAll('.wmre-mega-menu__container').length) {
          e.preventDefault(); // remove keyFocus to allow menu to show

          setMenuActive(topLevelListItem, true); // focus first menu item

          if (topLevelListItem.contains(subMenuLinks[0])) {
            subMenuLinks[0].focus();
          } else if (topLevelListItem.querySelector('.wmre-search-bar__input')) {
            topLevelListItem.querySelector('.wmre-search-bar__input').focus();
          }
        }
      };

      var handleKeydown = function handleKeydown(e, key) {
        e.stopPropagation(); // enable keyboard navigation only when search input is not active

        var searchInput = document.querySelector('.wmre-search-bar__input');

        if (searchInput !== document.activeElement) {
          // if key pressed is enter, space bar or down arrow
          if (key === 13 || key === 32 || key === 40) {
            // enter
            // check if link exists
            if (key === 13) {
              if (!topLevelLink.tagName === 'a' || !topLevelLink.getAttribute('href')) {
                openSubMenu(e);
              }
            } else {
              openSubMenu(e);
            }
          } else if (key === 37) {
            // left arrow
            var prevLink = getMenuLink(topLevelLinkIndex, topLevelLinks, 'prev');
            if (prevLink) prevLink.focus();
          } else if (key === 39) {
            // right arrow
            var nextLink = getMenuLink(topLevelLinkIndex, topLevelLinks, 'next');
            if (nextLink) nextLink.focus();
          } else if (key === 27) {
            // if escape pressed
            setMenuActive(topLevelListItem, false, topLevelLink);
          }
        }
      }; // if top level link doesn't have a mega-menu child add class to menu to hide overlay when hovered
      // has to be added/removed on mouseover to cover menus that have a mix of items with/without mega menus


      var isTopLevelWithMenu = topLevelListItem.querySelectorAll('.wmre-mega-menu__container').length;

      if (isTopLevelWithMenu) {
        topLevelLink.addEventListener('mouseover', function () {
          if (!menuDelay) {
            // if no menuDelay is active just open the menu
            setMenuActive(topLevelListItem);
          } else {
            // if menuDelay is active, clear all timeouts and start a new one
            clearTimeout(enterTimeOut);
            clearTimeout(leaveTimeOut);
            enterTimeOut = setTimeout(function () {
              // enter timeout completed, open menu and kill delay
              menuDelay = false;
              setMenuActive(topLevelListItem);
            }, delayTime);
          }
        });
        topLevelListItem.querySelector('.wmre-mega-menu__container').addEventListener('mouseover', function () {
          if (menuDelay) {
            // if container is rehovered before timeout is done, clear all timeouts kill the delay
            clearTimeout(enterTimeOut);
            clearTimeout(leaveTimeOut);
            menuDelay = false;
          }
        });
        topLevelListItem.addEventListener('mouseleave', function () {
          menuDelay = true; // leave timeout is active

          leaveTimeOut = setTimeout(function () {
            // leave timeout completed, close menu
            setMenuActive(topLevelListItem, false);
            menuDelay = false;
          }, delayTime);
        });
        topLevelListItem.addEventListener('blur', setMenuActive(topLevelListItem, false));
      }

      topLevelListItem.addEventListener('keydown', function (e) {
        handleKeydown(e, e.keyCode);
      }); // top lvl link event listeners

      topLevelLink.addEventListener('focus', function (e) {
        e.preventDefault();
        setMenuActive(topLevelListItem, false);
        clearActiveListItems();
      });
      topLevelLink.addEventListener('mousedown', function (e) {
        // prevent link focus on click
        e.preventDefault();
      }); // set up keyboard navigation for sub menu links

      var subMenuContainer = topLevelListItem.querySelector('.wmre-mega-menu__sub-menu');

      if (subMenuContainer) {
        setKeyboardNavigation(subMenuContainer, '.wmre-mega-menu__sub-menu-item', // what to do on first link
        function () {
          return topLevelLink.focus();
        }, // what to do on last link
        function () {
          setMenuActive(topLevelListItem, false);

          if (getMenuLink(topLevelLinkIndex, topLevelLinks, 'next')) {
            getMenuLink(topLevelLinkIndex, topLevelLinks, 'next').focus();
          }
        });
      }
    }); // set up keyboard navigation for search menu links

    var searchMenuContainer = menu.querySelector('.wmre-search-container');

    if (searchMenuContainer) {
      setKeyboardNavigation(searchMenuContainer, '.wmre-search-list', // what to do on first link
      function () {
        return menu.querySelector('.wmre-search-bar__input').focus();
      }, // what to do on last link
      function () {
        return setMenuActive(menu.querySelector('.wmre-mega-menu__search'), false, menu.querySelector('.wmre-mega-menu__search-btn'));
      });
    }
  });
};

/* harmony default export */ __webpack_exports__["default"] = (headerJs);

/***/ }),

/***/ "./src/wmre/patterns/search/search-filter/_example.js":
/*!************************************************************!*\
  !*** ./src/wmre/patterns/search/search-filter/_example.js ***!
  \************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var searchFilterJs = function searchFilterJs() {
  var showBtn = document.getElementById('show_filter_btn');
  var hideBtn = document.getElementById('hide_filter_btn');
  var showResults = document.getElementById('show_results_btn');
  var searchFilter = document.getElementById('search_filter');

  if (searchFilter) {
    var filterOptions = searchFilter.querySelectorAll('.wmre-fe-checkboxes__input');
    filterOptions.forEach(function (option) {
      option.addEventListener('change', function () {
        if (_toConsumableArray(filterOptions).some(function (input) {
          return input.checked;
        })) {
          searchFilter.classList.add('wmre-search-filter--has-inputs-checked');
        } else {
          searchFilter.classList.remove('wmre-search-filter--has-inputs-checked');
        }
      });
    });

    var showFilter = function showFilter() {
      var show = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      if (show) {
        searchFilter.classList.add('wmre-search-filter--is-open');
        searchFilter.setAttribute('aria-expanded', 'true');
      } else {
        searchFilter.classList.remove('wmre-search-filter--is-open');
        searchFilter.setAttribute('aria-expanded', 'false');
      }
    };

    var clearFilters = function clearFilters() {
      filterOptions.forEach(function (option) {
        option.checked = false; // eslint-disable-line no-param-reassign
      });
      searchFilter.classList.remove('wmre-search-filter--has-inputs-checked');
    };

    showBtn.addEventListener('click', function (e) {
      e.preventDefault();
      showFilter();
    });
    hideBtn.addEventListener('click', function (e) {
      e.preventDefault();
      showFilter(false);
    });
    document.querySelectorAll('.wmre-search-filter__clear-all').forEach(function (clearBtn) {
      clearBtn.addEventListener('click', function (e) {
        e.preventDefault();
        clearFilters();
      });
    });
    showResults.addEventListener('click', function () {
      return showFilter(false);
    });
  }
};

/* harmony default export */ __webpack_exports__["default"] = (searchFilterJs);

/***/ }),

/***/ "./src/www/_partials/component-example/_component-example.js":
/*!*******************************************************************!*\
  !*** ./src/www/_partials/component-example/_component-example.js ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function showCode() {
  // for each button we create below
  document.querySelectorAll('.wmre-js-show-code').forEach(function (ele) {
    function showMore(e) {
      var btn = e.target || e.srcElement; // Set btn to the element from which the click came
      // if the btn clicked contains this class, then it must be active, so reset it back to the norm

      if (btn.classList.contains('wmre-js-show-code--active')) {
        btn.previousSibling.querySelector('.hljs').style.maxHeight = '200px';
        btn.classList.remove('wmre-js-show-code--active');
        btn.innerText = 'Show more code';
      } else {
        // Else expand the code preview to 100%
        btn.previousSibling.querySelector('.hljs').style.maxHeight = '100%';
        btn.classList.add('wmre-js-show-code--active');
        btn.innerText = 'Show less code';
      }
    } // when clicked


    ele.addEventListener('click', function (e) {
      e.preventDefault();
      showMore(e);
    }); // When keyboard "enter" pressed

    ele.addEventListener('keydown', function (e) {
      if (e.keyCode === 13) {
        e.preventDefault();
        showMore(e);
      }
    });
  });
}

/* harmony default export */ __webpack_exports__["default"] = (function () {
  var _window = window,
      hljs = _window.hljs; // declare higlightJS as global var

  document.querySelectorAll('pre code').forEach(function (element) {
    // Run highlightJS for each pre code element found */
    hljs.highlightBlock(element); // If the code preview is 192 height (without padding) then we need to display the 'show more code' button

    if (element.clientHeight >= 192 && !element.classList.contains('wmre-show-more-ignore')) {
      var htmlString = '<a href="#" class="wmre-link wmre-js-show-code">Show more code</a>';
      element.parentElement.insertAdjacentHTML('afterend', htmlString);
    }
  });
  showCode(); // run show code function above when hljs has init
});

/***/ }),

/***/ "./src/www/assets/vendor/js/polyfills/ie11-forEach.js":
/*!************************************************************!*\
  !*** ./src/www/assets/vendor/js/polyfills/ie11-forEach.js ***!
  \************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var forEachPolyFill = function forEachPolyFill() {
  // missing forEach on NodeList for IE11
  if (window.NodeList && !NodeList.prototype.forEach) {
    NodeList.prototype.forEach = Array.prototype.forEach;
  }
};

/* harmony default export */ __webpack_exports__["default"] = (forEachPolyFill);

/***/ }),

/***/ "./src/www/pages/styles/colour-palettes/_color-palettes.js":
/*!*****************************************************************!*\
  !*** ./src/www/pages/styles/colour-palettes/_color-palettes.js ***!
  \*****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function colorPalettes() {
  var colors = document.querySelectorAll('.wmre-website-color-swatch__inner'); // Function to convert rgb to hex

  function rgb2hex(rgb) {
    var newRGB = rgb.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);

    function hex(x) {
      return "0".concat(parseInt(x, 10).toString(16)).slice(-2);
    }

    return "#".concat(hex(newRGB[1])).concat(hex(newRGB[2])).concat(hex(newRGB[3]));
  }

  colors.forEach(function (swatch) {
    var ele = swatch;
    var rgbColor = getComputedStyle(swatch).backgroundColor;
    var hexColor = rgb2hex(rgbColor);
    ele.nextElementSibling.querySelector('pre code .color-hex').innerText = "color: '".concat(hexColor, "'");
  });
}

/* harmony default export */ __webpack_exports__["default"] = (colorPalettes);

/***/ }),

/***/ "./src/www/wmre-website.js":
/*!*********************************!*\
  !*** ./src/www/wmre-website.js ***!
  \*********************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _assets_vendor_js_polyfills_ie11_forEach__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./assets/vendor/js/polyfills/ie11-forEach */ "./src/www/assets/vendor/js/polyfills/ie11-forEach.js");
/* harmony import */ var _pages_styles_colour_palettes_color_palettes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pages/styles/colour-palettes/_color-palettes */ "./src/www/pages/styles/colour-palettes/_color-palettes.js");
/* harmony import */ var _partials_component_example_component_example__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_partials/component-example/_component-example */ "./src/www/_partials/component-example/_component-example.js");
/* harmony import */ var _wmre_patterns_cookies_example__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../wmre/patterns/cookies/_example */ "./src/wmre/patterns/cookies/_example.js");
/* harmony import */ var _wmre_patterns_header_example__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../wmre/patterns/header/_example */ "./src/wmre/patterns/header/_example.js");
/* harmony import */ var _wmre_patterns_search_search_filter_example__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../wmre/patterns/search/search-filter/_example */ "./src/wmre/patterns/search/search-filter/_example.js");
/* harmony import */ var _wmre_patterns_footer_example__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../wmre/patterns/footer/_example */ "./src/wmre/patterns/footer/_example.js");








var icons = function icons() {
  // Ajax SVG in, SVGS are referenced in app (Icon component)
  var ajax = new XMLHttpRequest();
  ajax.open('GET', 'http://localhost:3000/img/wmre-sprite.min.svg', true);
  ajax.send();

  ajax.onload = function () {
    var div = document.createElement('div');
    div.style.display = 'none';
    div.innerHTML = ajax.responseText;
    document.body.insertBefore(div, document.body.childNodes[0]);
  };
};

window.addEventListener('DOMContentLoaded', (Object(_assets_vendor_js_polyfills_ie11_forEach__WEBPACK_IMPORTED_MODULE_0__["default"])(), icons(), Object(_pages_styles_colour_palettes_color_palettes__WEBPACK_IMPORTED_MODULE_1__["default"])(), Object(_wmre_patterns_cookies_example__WEBPACK_IMPORTED_MODULE_3__["default"])(), Object(_wmre_patterns_header_example__WEBPACK_IMPORTED_MODULE_4__["default"])(), Object(_wmre_patterns_search_search_filter_example__WEBPACK_IMPORTED_MODULE_5__["default"])(), Object(_wmre_patterns_footer_example__WEBPACK_IMPORTED_MODULE_6__["default"])(), _partials_component_example_component_example__WEBPACK_IMPORTED_MODULE_2__["default"]));

/***/ })

/******/ });
//# sourceMappingURL=wmre-website.min.js.map